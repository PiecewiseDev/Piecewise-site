"use strict";
(self["webpackChunkbusiness_website"] = self["webpackChunkbusiness_website"] || []).push([["components_ui_Button_tsx"],{

/***/ "./components/ui/Button.tsx":
/*!**********************************!*\
  !*** ./components/ui/Button.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonAccent: () => (/* binding */ ButtonAccent),
/* harmony export */   ButtonPrimary: () => (/* binding */ ButtonPrimary),
/* harmony export */   ButtonSecondary: () => (/* binding */ ButtonSecondary)
/* harmony export */ });
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/next/dist/compiled/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

"use client";



/**
 * Button base component with shared functionality
 * Not intended for direct use - use ButtonPrimary or ButtonSecondary instead
 */ const Button = ({ children, className = "", href, type = "button", size = "md", fullWidth = false, onClick, disabled = false, icon, isLoading = false, ...props })=>{
    // Size classes
    const sizeClasses = {
        sm: "px-4 py-2 text-sm",
        md: "px-6 py-3 text-base",
        lg: "px-8 py-4 text-lg"
    };
    // Width class
    const widthClass = fullWidth ? "w-full" : "";
    // Loading and disabled states
    const isDisabled = disabled || isLoading;
    // Size-specific classes for icons
    const iconSizeClasses = {
        sm: "h-4 w-4",
        md: "h-5 w-5",
        lg: "h-6 w-6"
    };
    // Common classes for all button types
    const baseClasses = `
    inline-flex items-center justify-center font-medium rounded-lg
    transition-all duration-200 ease-in-out ${sizeClasses[size]} ${widthClass}
    ${isDisabled ? "opacity-60 cursor-not-allowed" : ""}
    ${className}
  `;
    // Loading indicator
    const LoadingSpinner = ()=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("svg", {
            className: "animate-spin -ml-1 mr-2 h-4 w-4",
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            children: [
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("circle", {
                    className: "opacity-25",
                    cx: "12",
                    cy: "12",
                    r: "10",
                    stroke: "currentColor",
                    strokeWidth: "4"
                }, void 0, false, {
                    fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
                    lineNumber: 67,
                    columnNumber: 7
                }, undefined),
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("path", {
                    className: "opacity-75",
                    fill: "currentColor",
                    d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                }, void 0, false, {
                    fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
                    lineNumber: 68,
                    columnNumber: 7
                }, undefined)
            ]
        }, void 0, true, {
            fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
            lineNumber: 66,
            columnNumber: 5
        }, undefined);
    // Content with icon and/or loading spinner
    const content = /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
        children: [
            isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(LoadingSpinner, {}, void 0, false, {
                fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
                lineNumber: 75,
                columnNumber: 21
            }, undefined),
            icon && !isLoading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
                className: `mr-2 flex items-center justify-center ${iconSizeClasses[size]}`,
                children: icon
            }, void 0, false, {
                fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
                lineNumber: 77,
                columnNumber: 9
            }, undefined),
            children
        ]
    }, void 0, true);
    // Render as link or button
    if (href) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {
            href: href,
            className: baseClasses,
            onClick: isDisabled ? (e)=>e.preventDefault() : onClick,
            ...props,
            children: content
        }, void 0, false, {
            fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
            lineNumber: 88,
            columnNumber: 7
        }, undefined);
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("button", {
        type: type,
        className: baseClasses,
        onClick: onClick,
        disabled: isDisabled,
        ...props,
        children: content
    }, void 0, false, {
        fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
        lineNumber: 100,
        columnNumber: 5
    }, undefined);
};
_c = Button;
/**
 * ButtonPrimary - Primary action button with dark background and white text
 * 
 * Usage example:
 * ```tsx
 * <ButtonPrimary href="/contact">Contact Us</ButtonPrimary>
 * <ButtonPrimary onClick={handleAction} size="lg">Get Started</ButtonPrimary>
 * <ButtonPrimary isLoading>Processing...</ButtonPrimary>
 * ```
 */ function ButtonPrimary(props) {
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {
        ...props,
        className: `bg-[#1a2e3b] text-white hover:opacity-90 hover:shadow-lg hover:brightness-105 
      hover:-translate-y-0.5 active:opacity-90 active:shadow-sm active:translate-y-0.5
      focus:ring-2 focus:ring-accent focus:outline-none shadow-sm ${props.className || ""}`
    }, void 0, false, {
        fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
        lineNumber: 124,
        columnNumber: 5
    }, this);
}
_c1 = ButtonPrimary;
/**
 * ButtonSecondary - Secondary button with transparent background and border
 * 
 * Usage example:
 * ```tsx
 * <ButtonSecondary href="/learn-more">Learn More</ButtonSecondary>
 * <ButtonSecondary onClick={handleAction}>View Details</ButtonSecondary>
 * ```
 */ function ButtonSecondary(props) {
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {
        ...props,
        className: `border border-[#1a2e3b] text-[#1a2e3b] bg-white hover:bg-gray-100 
      hover:shadow-md hover:-translate-y-0.5 active:opacity-90 active:shadow-sm active:translate-y-0.5
      focus:ring-2 focus:ring-accent focus:outline-none ${props.className || ""}`
    }, void 0, false, {
        fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
        lineNumber: 144,
        columnNumber: 5
    }, this);
}
_c2 = ButtonSecondary;
/**
 * ButtonAccent - Accent button with the brand's accent color (green)
 * 
 * Usage example:
 * ```tsx
 * <ButtonAccent href="/signup">Sign Up</ButtonAccent>
 * <ButtonAccent onClick={handleAction}>Start Free Trial</ButtonAccent>
 * ```
 */ function ButtonAccent(props) {
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {
        ...props,
        className: `bg-accent text-white hover:bg-accent-dark hover:shadow-lg hover:brightness-105 
      hover:-translate-y-0.5 active:opacity-90 active:shadow-sm active:translate-y-0.5
      focus:ring-2 focus:ring-accent focus:outline-none shadow-sm ${props.className || ""}`
    }, void 0, false, {
        fileName: "/Users/kylelarsen/Documents/Notation Website/components/ui/Button.tsx",
        lineNumber: 164,
        columnNumber: 5
    }, this);
}
_c3 = ButtonAccent;
ButtonPrimary.__docgenInfo = {
    "description": 'ButtonPrimary - Primary action button with dark background and white text\n\nUsage example:\n```tsx\n<ButtonPrimary href="/contact">Contact Us</ButtonPrimary>\n<ButtonPrimary onClick={handleAction} size="lg">Get Started</ButtonPrimary>\n<ButtonPrimary isLoading>Processing...</ButtonPrimary>\n```',
    "methods": [],
    "displayName": "ButtonPrimary",
    "props": {
        "children": {
            "required": true,
            "tsType": {
                "name": "ReactNode"
            },
            "description": ""
        },
        "className": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "href": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "type": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'button' | 'submit' | 'reset'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'button'"
                    },
                    {
                        "name": "literal",
                        "value": "'submit'"
                    },
                    {
                        "name": "literal",
                        "value": "'reset'"
                    }
                ]
            },
            "description": ""
        },
        "size": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'sm' | 'md' | 'lg'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'sm'"
                    },
                    {
                        "name": "literal",
                        "value": "'md'"
                    },
                    {
                        "name": "literal",
                        "value": "'lg'"
                    }
                ]
            },
            "description": ""
        },
        "fullWidth": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "onClick": {
            "required": false,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "() => void",
                "signature": {
                    "arguments": [],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "disabled": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "icon": {
            "required": false,
            "tsType": {
                "name": "ReactNode"
            },
            "description": ""
        },
        "isLoading": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        }
    }
};
ButtonSecondary.__docgenInfo = {
    "description": 'ButtonSecondary - Secondary button with transparent background and border\n\nUsage example:\n```tsx\n<ButtonSecondary href="/learn-more">Learn More</ButtonSecondary>\n<ButtonSecondary onClick={handleAction}>View Details</ButtonSecondary>\n```',
    "methods": [],
    "displayName": "ButtonSecondary",
    "props": {
        "children": {
            "required": true,
            "tsType": {
                "name": "ReactNode"
            },
            "description": ""
        },
        "className": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "href": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "type": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'button' | 'submit' | 'reset'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'button'"
                    },
                    {
                        "name": "literal",
                        "value": "'submit'"
                    },
                    {
                        "name": "literal",
                        "value": "'reset'"
                    }
                ]
            },
            "description": ""
        },
        "size": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'sm' | 'md' | 'lg'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'sm'"
                    },
                    {
                        "name": "literal",
                        "value": "'md'"
                    },
                    {
                        "name": "literal",
                        "value": "'lg'"
                    }
                ]
            },
            "description": ""
        },
        "fullWidth": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "onClick": {
            "required": false,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "() => void",
                "signature": {
                    "arguments": [],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "disabled": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "icon": {
            "required": false,
            "tsType": {
                "name": "ReactNode"
            },
            "description": ""
        },
        "isLoading": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        }
    }
};
ButtonAccent.__docgenInfo = {
    "description": 'ButtonAccent - Accent button with the brand\'s accent color (green)\n\nUsage example:\n```tsx\n<ButtonAccent href="/signup">Sign Up</ButtonAccent>\n<ButtonAccent onClick={handleAction}>Start Free Trial</ButtonAccent>\n```',
    "methods": [],
    "displayName": "ButtonAccent",
    "props": {
        "children": {
            "required": true,
            "tsType": {
                "name": "ReactNode"
            },
            "description": ""
        },
        "className": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "href": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "type": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'button' | 'submit' | 'reset'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'button'"
                    },
                    {
                        "name": "literal",
                        "value": "'submit'"
                    },
                    {
                        "name": "literal",
                        "value": "'reset'"
                    }
                ]
            },
            "description": ""
        },
        "size": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'sm' | 'md' | 'lg'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'sm'"
                    },
                    {
                        "name": "literal",
                        "value": "'md'"
                    },
                    {
                        "name": "literal",
                        "value": "'lg'"
                    }
                ]
            },
            "description": ""
        },
        "fullWidth": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "onClick": {
            "required": false,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "() => void",
                "signature": {
                    "arguments": [],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "disabled": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        },
        "icon": {
            "required": false,
            "tsType": {
                "name": "ReactNode"
            },
            "description": ""
        },
        "isLoading": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": ""
        }
    }
};
var _c, _c1, _c2, _c3;
__webpack_require__.$Refresh$.register(_c, "Button");
__webpack_require__.$Refresh$.register(_c1, "ButtonPrimary");
__webpack_require__.$Refresh$.register(_c2, "ButtonSecondary");
__webpack_require__.$Refresh$.register(_c3, "ButtonAccent");


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

}]);
//# sourceMappingURL=components_ui_Button_tsx.iframe.bundle.js.map